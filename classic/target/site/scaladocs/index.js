Index.PACKAGES = {"org.apache.spark.sql.catalyst" : [], "org.apache.spark.sql" : [], "com" : [], "com.sparkutils.testing" : [{"name" : "com.sparkutils.testing.AnalysisException", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.testing.AnalysisException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "com.sparkutils.testing.AnalysisException.message", "link" : "com\/sparkutils\/testing\/AnalysisException.html#message:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/sparkutils\/testing\/AnalysisException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/sparkutils\/testing\/AnalysisException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/sparkutils\/testing\/AnalysisException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/sparkutils\/testing\/AnalysisException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/AnalysisException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/AnalysisException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/AnalysisException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/AnalysisException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/AnalysisException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/AnalysisException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/AnalysisException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/AnalysisException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/AnalysisException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/AnalysisException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/AnalysisException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/AnalysisException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/AnalysisException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/AnalysisException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/AnalysisException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/testing\/AnalysisException.html", "kind" : "case class"}, {"name" : "com.sparkutils.testing.ClassicUtils", "trait" : "com\/sparkutils\/testing\/ClassicUtils.html", "kind" : "trait", "members_trait" : [{"label" : "withSQLConf", "tail" : "(pairs: (String, String)*)(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.withSQLConf", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#withSQLConf[T](pairs:(String,String)*)(f:=>T):T", "kind" : "def"}, {"label" : "evalCodeGensNoResolve", "tail" : "(f: => T): (T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGensNoResolve", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#evalCodeGensNoResolve[T](f:=>T):(T,T)", "kind" : "def"}, {"label" : "evalCodeGens", "tail" : "(f: => T): (T, T, T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGens", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#evalCodeGens[T](f:=>T):(T,T,T,T)", "kind" : "def"}, {"label" : "doWithResolve", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.doWithResolve", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#doWithResolve[T](f:=>T):T", "kind" : "def"}, {"label" : "doResolve", "tail" : ": ThreadLocal[Boolean]", "member" : "com.sparkutils.testing.ClassicUtils.doResolve", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#doResolve:ThreadLocal[Boolean]", "kind" : "val"}, {"label" : "inCodegen", "tail" : "(): Boolean", "member" : "com.sparkutils.testing.ClassicUtils.inCodegen", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#inCodegen:Boolean", "kind" : "def"}, {"label" : "forceInterpreted", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceInterpreted", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#forceInterpreted[T](f:=>T):T", "kind" : "def"}, {"label" : "forceCodeGen", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceCodeGen", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#forceCodeGen[T](f:=>T):T", "kind" : "def"}, {"label" : "classicSqlContext", "tail" : ": SQLContext", "member" : "com.sparkutils.testing.ClassicUtils.classicSqlContext", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#classicSqlContext:org.apache.spark.sql.SQLContext", "kind" : "lazy val"}, {"label" : "classicSparkSession", "tail" : ": SparkSession", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSession", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#classicSparkSession:org.apache.spark.sql.SparkSession", "kind" : "lazy val"}, {"label" : "registerFS", "tail" : "(sparkSessionBuilder: Builder): Builder", "member" : "com.sparkutils.testing.ClassicUtils.registerFS", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#registerFS(sparkSessionBuilder:org.apache.spark.sql.SparkSession.Builder):org.apache.spark.sql.SparkSession.Builder", "kind" : "def"}, {"label" : "excludeFilters", "tail" : ": Boolean", "member" : "com.sparkutils.testing.ClassicUtils.excludeFilters", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#excludeFilters:Boolean", "kind" : "val"}, {"label" : "classicSparkSessionF", "tail" : "(): SparkSession", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSessionF", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#classicSparkSessionF:org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "loggingLevel", "tail" : "(): String", "member" : "com.sparkutils.testing.ClassicUtils.loggingLevel", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#loggingLevel:String", "kind" : "def"}, {"label" : "lambdaSubQueryMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.lambdaSubQueryMode", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#lambdaSubQueryMode:String", "kind" : "val"}, {"label" : "classicHostMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.classicHostMode", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#classicHostMode:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/ClassicUtils.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Functionality that only applies to Spark Classic"}, {"name" : "com.sparkutils.testing.ConnectUtils", "trait" : "com\/sparkutils\/testing\/ConnectUtils.html", "kind" : "trait", "members_trait" : [{"label" : "connectSqlContext", "tail" : ": Option[SQLContext]", "member" : "com.sparkutils.testing.ConnectUtils.connectSqlContext", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#connectSqlContext:Option[org.apache.spark.sql.SQLContext]", "kind" : "lazy val"}, {"label" : "connectSparkSession", "tail" : ": Option[SparkSession]", "member" : "com.sparkutils.testing.ConnectUtils.connectSparkSession", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#connectSparkSession:Option[org.apache.spark.sql.SparkSession]", "kind" : "lazy val"}, {"label" : "disableConnectTesting", "tail" : ": String", "member" : "com.sparkutils.testing.ConnectUtils.disableConnectTesting", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#disableConnectTesting:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/ConnectUtils.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/ConnectUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "com.sparkutils.testing.NoSparkConnect", "shortDescription" : "Annotate your scalatest tests with NoSparkConnect to disable running on Spark Connect", "object" : "com\/sparkutils\/testing\/NoSparkConnect$.html", "members_object" : [{"label" : "name", "tail" : ": String", "member" : "org.scalatest.Tag.name", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/NoSparkConnect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.testing.SparkTestSuite", "trait" : "com\/sparkutils\/testing\/SparkTestSuite.html", "kind" : "trait", "members_trait" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "com.sparkutils.testing.SparkTestSuite.withFixture", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#withFixture(test:SparkTestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.TestSuite.runTest", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.Suite.testDataFor", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.Suite.styleName", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#styleName:String", "kind" : "val"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.Suite.run", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.Suite.runTests", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.Suite.testNames", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#testNames:Set[String]", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.Suite.tags", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: => T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "testPlan", "tail" : "(logicalPlanRule: Rule[LogicalPlan], secondRunWithoutPlan: Boolean, disable: (Int) => Boolean)(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.testPlan", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#testPlan(logicalPlanRule:org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan],secondRunWithoutPlan:Boolean,disable:Int=>Boolean)(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.debug", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#debug(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "getPushDowns", "tail" : "(sparkPlan: SparkPlan): Seq[Filter]", "member" : "com.sparkutils.testing.TestUtils.getPushDowns", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#getPushDowns(sparkPlan:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "getPushDowns", "tail" : "(dataset: Dataset[T]): Seq[Filter]", "member" : "com.sparkutils.testing.TestUtils.getPushDowns", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#getPushDowns[T](dataset:org.apache.spark.sql.Dataset[T]):Seq[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "anyCauseHas", "tail" : "(t: Throwable, f: (Throwable) => Boolean): Boolean", "member" : "com.sparkutils.testing.TestUtils.anyCauseHas", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#anyCauseHas(t:Throwable,f:Throwable=>Boolean):Boolean", "kind" : "def"}, {"label" : "onlyWithExtension", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.onlyWithExtension", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#onlyWithExtension(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not_Cluster", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not_Cluster", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not_Cluster(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not_Databricks", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not_Databricks", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not_Databricks(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "onDatabricks", "tail" : "(): Boolean", "member" : "com.sparkutils.testing.TestUtils.onDatabricks", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#onDatabricks:Boolean", "kind" : "def"}, {"label" : "not2_4_or_3_0_or_3_1", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not2_4_or_3_0_or_3_1", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not2_4_or_3_0_or_3_1(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "only2_4", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.only2_4", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#only2_4(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "v4_0_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.v4_0_and_above", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#v4_0_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not_4_0_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not_4_0_and_above", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not_4_0_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "v3_2_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.v3_2_and_above", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#v3_2_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "v3_4_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.v3_4_and_above", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#v3_4_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not3_4_or_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not3_4_or_above", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not3_4_or_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "sparkVersionNumericMajor", "tail" : ": Int", "member" : "com.sparkutils.testing.TestUtils.sparkVersionNumericMajor", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#sparkVersionNumericMajor:Int", "kind" : "lazy val"}, {"label" : "not3_4", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not3_4", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not3_4(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not2_4", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not2_4", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#not2_4(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "cleanupOutput", "tail" : "(): Unit", "member" : "com.sparkutils.testing.TestUtils.cleanupOutput", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#cleanupOutput():Unit", "kind" : "def"}, {"label" : "cleanUp", "tail" : "(target: String): Unit", "member" : "com.sparkutils.testing.TestUtils.cleanUp", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#cleanUp(target:String):Unit", "kind" : "def"}, {"label" : "outputDir", "tail" : ": String", "member" : "com.sparkutils.testing.TestUtils.outputDir", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#outputDir:String", "kind" : "lazy val"}, {"label" : "stop", "tail" : "(start: Long): (Long, String)", "member" : "com.sparkutils.testing.TestUtils.stop", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#stop(start:Long):(Long,String)", "kind" : "def"}, {"label" : "sparkSession", "tail" : "(): SparkSession", "member" : "com.sparkutils.testing.TestUtils.sparkSession", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#sparkSession:org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "inConnect", "tail" : ": AtomicBoolean", "member" : "com.sparkutils.testing.TestUtils.inConnect", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#inConnect:java.util.concurrent.atomic.AtomicBoolean", "kind" : "val"}, {"label" : "sqlContext", "tail" : "(): SQLContext", "member" : "com.sparkutils.testing.TestUtils.sqlContext", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#sqlContext:org.apache.spark.sql.SQLContext", "kind" : "def"}, {"label" : "connectSqlContext", "tail" : ": Option[SQLContext]", "member" : "com.sparkutils.testing.ConnectUtils.connectSqlContext", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#connectSqlContext:Option[org.apache.spark.sql.SQLContext]", "kind" : "lazy val"}, {"label" : "connectSparkSession", "tail" : ": Option[SparkSession]", "member" : "com.sparkutils.testing.ConnectUtils.connectSparkSession", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#connectSparkSession:Option[org.apache.spark.sql.SparkSession]", "kind" : "lazy val"}, {"label" : "disableConnectTesting", "tail" : ": String", "member" : "com.sparkutils.testing.ConnectUtils.disableConnectTesting", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#disableConnectTesting:String", "kind" : "val"}, {"label" : "withSQLConf", "tail" : "(pairs: (String, String)*)(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.withSQLConf", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#withSQLConf[T](pairs:(String,String)*)(f:=>T):T", "kind" : "def"}, {"label" : "evalCodeGensNoResolve", "tail" : "(f: => T): (T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGensNoResolve", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#evalCodeGensNoResolve[T](f:=>T):(T,T)", "kind" : "def"}, {"label" : "evalCodeGens", "tail" : "(f: => T): (T, T, T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGens", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#evalCodeGens[T](f:=>T):(T,T,T,T)", "kind" : "def"}, {"label" : "doWithResolve", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.doWithResolve", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#doWithResolve[T](f:=>T):T", "kind" : "def"}, {"label" : "doResolve", "tail" : ": ThreadLocal[Boolean]", "member" : "com.sparkutils.testing.ClassicUtils.doResolve", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#doResolve:ThreadLocal[Boolean]", "kind" : "val"}, {"label" : "inCodegen", "tail" : "(): Boolean", "member" : "com.sparkutils.testing.ClassicUtils.inCodegen", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#inCodegen:Boolean", "kind" : "def"}, {"label" : "forceInterpreted", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceInterpreted", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#forceInterpreted[T](f:=>T):T", "kind" : "def"}, {"label" : "forceCodeGen", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceCodeGen", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#forceCodeGen[T](f:=>T):T", "kind" : "def"}, {"label" : "classicSqlContext", "tail" : ": SQLContext", "member" : "com.sparkutils.testing.ClassicUtils.classicSqlContext", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#classicSqlContext:org.apache.spark.sql.SQLContext", "kind" : "lazy val"}, {"label" : "classicSparkSession", "tail" : ": SparkSession", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSession", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#classicSparkSession:org.apache.spark.sql.SparkSession", "kind" : "lazy val"}, {"label" : "registerFS", "tail" : "(sparkSessionBuilder: Builder): Builder", "member" : "com.sparkutils.testing.ClassicUtils.registerFS", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#registerFS(sparkSessionBuilder:org.apache.spark.sql.SparkSession.Builder):org.apache.spark.sql.SparkSession.Builder", "kind" : "def"}, {"label" : "excludeFilters", "tail" : ": Boolean", "member" : "com.sparkutils.testing.ClassicUtils.excludeFilters", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#excludeFilters:Boolean", "kind" : "val"}, {"label" : "classicSparkSessionF", "tail" : "(): SparkSession", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSessionF", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#classicSparkSessionF:org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "loggingLevel", "tail" : "(): String", "member" : "com.sparkutils.testing.ClassicUtils.loggingLevel", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#loggingLevel:String", "kind" : "def"}, {"label" : "lambdaSubQueryMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.lambdaSubQueryMode", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#lambdaSubQueryMode:String", "kind" : "val"}, {"label" : "classicHostMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.classicHostMode", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#classicHostMode:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/SparkTestSuite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Runs tests against both Spark Connect and Spark Classic."}, {"name" : "com.sparkutils.testing.SparkTestUtils", "shortDescription" : "", "object" : "com\/sparkutils\/testing\/SparkTestUtils$.html", "members_object" : [{"label" : "localConnectServerForTesting", "tail" : "(): Option[SparkSession]", "member" : "com.sparkutils.testing.SparkTestUtils.localConnectServerForTesting", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#localConnectServerForTesting:Option[org.apache.spark.sql.SparkSession]", "kind" : "def"}, {"label" : "enumToScala", "tail" : "(enum: Enumeration[A]): Iterator[A]", "member" : "com.sparkutils.testing.SparkTestUtils.enumToScala", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#enumToScala[A](enum:java.util.Enumeration[A]):Iterator[A]", "kind" : "def"}, {"label" : "getCorrectPlan", "tail" : "(sparkPlan: SparkPlan): SparkPlan", "member" : "com.sparkutils.testing.SparkTestUtils.getCorrectPlan", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#getCorrectPlan(sparkPlan:org.apache.spark.sql.execution.SparkPlan):org.apache.spark.sql.execution.SparkPlan", "kind" : "def"}, {"label" : "resolveBuiltinOrTempFunction", "tail" : "(sparkSession: SparkSession)(name: String, exps: Seq[Expression]): Option[Expression]", "member" : "com.sparkutils.testing.SparkTestUtils.resolveBuiltinOrTempFunction", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#resolveBuiltinOrTempFunction(sparkSession:org.apache.spark.sql.SparkSession)(name:String,exps:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "docpath", "tail" : "(suffix: String): String", "member" : "com.sparkutils.testing.SparkTestUtils.docpath", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#docpath(suffix:String):String", "kind" : "def"}, {"label" : "docDir", "tail" : "(): String", "member" : "com.sparkutils.testing.SparkTestUtils.docDir", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#docDir:String", "kind" : "def"}, {"label" : "tdocpath", "tail" : ": AtomicReference[String]", "member" : "com.sparkutils.testing.SparkTestUtils.tdocpath", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#tdocpath:java.util.concurrent.atomic.AtomicReference[String]", "kind" : "var"}, {"label" : "path", "tail" : "(suffix: String): String", "member" : "com.sparkutils.testing.SparkTestUtils.path", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#path(suffix:String):String", "kind" : "def"}, {"label" : "setPath", "tail" : "(newPath: String): Unit", "member" : "com.sparkutils.testing.SparkTestUtils.setPath", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#setPath(newPath:String):Unit", "kind" : "def"}, {"label" : "ouputDir", "tail" : "(): String", "member" : "com.sparkutils.testing.SparkTestUtils.ouputDir", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#ouputDir:String", "kind" : "def"}, {"label" : "tpath", "tail" : ": AtomicReference[String]", "member" : "com.sparkutils.testing.SparkTestUtils.tpath", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#tpath:java.util.concurrent.atomic.AtomicReference[String]", "kind" : "var"}, {"label" : "testStaticConfigKey", "tail" : "(k: String): Unit", "member" : "com.sparkutils.testing.SparkTestUtils.testStaticConfigKey", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#testStaticConfigKey(k:String):Unit", "kind" : "def"}, {"label" : "skipHofs", "tail" : ": Boolean", "member" : "com.sparkutils.testing.SparkTestUtils.skipHofs", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#skipHofs:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/SparkTestUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.testing.TestUtils", "trait" : "com\/sparkutils\/testing\/TestUtils.html", "kind" : "trait", "members_trait" : [{"label" : "testPlan", "tail" : "(logicalPlanRule: Rule[LogicalPlan], secondRunWithoutPlan: Boolean, disable: (Int) => Boolean)(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.testPlan", "link" : "com\/sparkutils\/testing\/TestUtils.html#testPlan(logicalPlanRule:org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan],secondRunWithoutPlan:Boolean,disable:Int=>Boolean)(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.debug", "link" : "com\/sparkutils\/testing\/TestUtils.html#debug(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "getPushDowns", "tail" : "(sparkPlan: SparkPlan): Seq[Filter]", "member" : "com.sparkutils.testing.TestUtils.getPushDowns", "link" : "com\/sparkutils\/testing\/TestUtils.html#getPushDowns(sparkPlan:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "getPushDowns", "tail" : "(dataset: Dataset[T]): Seq[Filter]", "member" : "com.sparkutils.testing.TestUtils.getPushDowns", "link" : "com\/sparkutils\/testing\/TestUtils.html#getPushDowns[T](dataset:org.apache.spark.sql.Dataset[T]):Seq[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "anyCauseHas", "tail" : "(t: Throwable, f: (Throwable) => Boolean): Boolean", "member" : "com.sparkutils.testing.TestUtils.anyCauseHas", "link" : "com\/sparkutils\/testing\/TestUtils.html#anyCauseHas(t:Throwable,f:Throwable=>Boolean):Boolean", "kind" : "def"}, {"label" : "onlyWithExtension", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.onlyWithExtension", "link" : "com\/sparkutils\/testing\/TestUtils.html#onlyWithExtension(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not_Cluster", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not_Cluster", "link" : "com\/sparkutils\/testing\/TestUtils.html#not_Cluster(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not_Databricks", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not_Databricks", "link" : "com\/sparkutils\/testing\/TestUtils.html#not_Databricks(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "onDatabricks", "tail" : "(): Boolean", "member" : "com.sparkutils.testing.TestUtils.onDatabricks", "link" : "com\/sparkutils\/testing\/TestUtils.html#onDatabricks:Boolean", "kind" : "def"}, {"label" : "not2_4_or_3_0_or_3_1", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not2_4_or_3_0_or_3_1", "link" : "com\/sparkutils\/testing\/TestUtils.html#not2_4_or_3_0_or_3_1(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "only2_4", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.only2_4", "link" : "com\/sparkutils\/testing\/TestUtils.html#only2_4(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "v4_0_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.v4_0_and_above", "link" : "com\/sparkutils\/testing\/TestUtils.html#v4_0_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not_4_0_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not_4_0_and_above", "link" : "com\/sparkutils\/testing\/TestUtils.html#not_4_0_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "v3_2_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.v3_2_and_above", "link" : "com\/sparkutils\/testing\/TestUtils.html#v3_2_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "v3_4_and_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.v3_4_and_above", "link" : "com\/sparkutils\/testing\/TestUtils.html#v3_4_and_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not3_4_or_above", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not3_4_or_above", "link" : "com\/sparkutils\/testing\/TestUtils.html#not3_4_or_above(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "sparkVersionNumericMajor", "tail" : ": Int", "member" : "com.sparkutils.testing.TestUtils.sparkVersionNumericMajor", "link" : "com\/sparkutils\/testing\/TestUtils.html#sparkVersionNumericMajor:Int", "kind" : "lazy val"}, {"label" : "not3_4", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not3_4", "link" : "com\/sparkutils\/testing\/TestUtils.html#not3_4(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "not2_4", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtils.not2_4", "link" : "com\/sparkutils\/testing\/TestUtils.html#not2_4(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "cleanupOutput", "tail" : "(): Unit", "member" : "com.sparkutils.testing.TestUtils.cleanupOutput", "link" : "com\/sparkutils\/testing\/TestUtils.html#cleanupOutput():Unit", "kind" : "def"}, {"label" : "cleanUp", "tail" : "(target: String): Unit", "member" : "com.sparkutils.testing.TestUtils.cleanUp", "link" : "com\/sparkutils\/testing\/TestUtils.html#cleanUp(target:String):Unit", "kind" : "def"}, {"label" : "outputDir", "tail" : ": String", "member" : "com.sparkutils.testing.TestUtils.outputDir", "link" : "com\/sparkutils\/testing\/TestUtils.html#outputDir:String", "kind" : "lazy val"}, {"label" : "stop", "tail" : "(start: Long): (Long, String)", "member" : "com.sparkutils.testing.TestUtils.stop", "link" : "com\/sparkutils\/testing\/TestUtils.html#stop(start:Long):(Long,String)", "kind" : "def"}, {"label" : "sparkSession", "tail" : "(): SparkSession", "member" : "com.sparkutils.testing.TestUtils.sparkSession", "link" : "com\/sparkutils\/testing\/TestUtils.html#sparkSession:org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "inConnect", "tail" : ": AtomicBoolean", "member" : "com.sparkutils.testing.TestUtils.inConnect", "link" : "com\/sparkutils\/testing\/TestUtils.html#inConnect:java.util.concurrent.atomic.AtomicBoolean", "kind" : "val"}, {"label" : "sqlContext", "tail" : "(): SQLContext", "member" : "com.sparkutils.testing.TestUtils.sqlContext", "link" : "com\/sparkutils\/testing\/TestUtils.html#sqlContext:org.apache.spark.sql.SQLContext", "kind" : "def"}, {"label" : "connectSqlContext", "tail" : ": Option[SQLContext]", "member" : "com.sparkutils.testing.ConnectUtils.connectSqlContext", "link" : "com\/sparkutils\/testing\/TestUtils.html#connectSqlContext:Option[org.apache.spark.sql.SQLContext]", "kind" : "lazy val"}, {"label" : "connectSparkSession", "tail" : ": Option[SparkSession]", "member" : "com.sparkutils.testing.ConnectUtils.connectSparkSession", "link" : "com\/sparkutils\/testing\/TestUtils.html#connectSparkSession:Option[org.apache.spark.sql.SparkSession]", "kind" : "lazy val"}, {"label" : "disableConnectTesting", "tail" : ": String", "member" : "com.sparkutils.testing.ConnectUtils.disableConnectTesting", "link" : "com\/sparkutils\/testing\/TestUtils.html#disableConnectTesting:String", "kind" : "val"}, {"label" : "withSQLConf", "tail" : "(pairs: (String, String)*)(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.withSQLConf", "link" : "com\/sparkutils\/testing\/TestUtils.html#withSQLConf[T](pairs:(String,String)*)(f:=>T):T", "kind" : "def"}, {"label" : "evalCodeGensNoResolve", "tail" : "(f: => T): (T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGensNoResolve", "link" : "com\/sparkutils\/testing\/TestUtils.html#evalCodeGensNoResolve[T](f:=>T):(T,T)", "kind" : "def"}, {"label" : "evalCodeGens", "tail" : "(f: => T): (T, T, T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGens", "link" : "com\/sparkutils\/testing\/TestUtils.html#evalCodeGens[T](f:=>T):(T,T,T,T)", "kind" : "def"}, {"label" : "doWithResolve", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.doWithResolve", "link" : "com\/sparkutils\/testing\/TestUtils.html#doWithResolve[T](f:=>T):T", "kind" : "def"}, {"label" : "doResolve", "tail" : ": ThreadLocal[Boolean]", "member" : "com.sparkutils.testing.ClassicUtils.doResolve", "link" : "com\/sparkutils\/testing\/TestUtils.html#doResolve:ThreadLocal[Boolean]", "kind" : "val"}, {"label" : "inCodegen", "tail" : "(): Boolean", "member" : "com.sparkutils.testing.ClassicUtils.inCodegen", "link" : "com\/sparkutils\/testing\/TestUtils.html#inCodegen:Boolean", "kind" : "def"}, {"label" : "forceInterpreted", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceInterpreted", "link" : "com\/sparkutils\/testing\/TestUtils.html#forceInterpreted[T](f:=>T):T", "kind" : "def"}, {"label" : "forceCodeGen", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceCodeGen", "link" : "com\/sparkutils\/testing\/TestUtils.html#forceCodeGen[T](f:=>T):T", "kind" : "def"}, {"label" : "classicSqlContext", "tail" : ": SQLContext", "member" : "com.sparkutils.testing.ClassicUtils.classicSqlContext", "link" : "com\/sparkutils\/testing\/TestUtils.html#classicSqlContext:org.apache.spark.sql.SQLContext", "kind" : "lazy val"}, {"label" : "classicSparkSession", "tail" : ": SparkSession", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSession", "link" : "com\/sparkutils\/testing\/TestUtils.html#classicSparkSession:org.apache.spark.sql.SparkSession", "kind" : "lazy val"}, {"label" : "registerFS", "tail" : "(sparkSessionBuilder: Builder): Builder", "member" : "com.sparkutils.testing.ClassicUtils.registerFS", "link" : "com\/sparkutils\/testing\/TestUtils.html#registerFS(sparkSessionBuilder:org.apache.spark.sql.SparkSession.Builder):org.apache.spark.sql.SparkSession.Builder", "kind" : "def"}, {"label" : "excludeFilters", "tail" : ": Boolean", "member" : "com.sparkutils.testing.ClassicUtils.excludeFilters", "link" : "com\/sparkutils\/testing\/TestUtils.html#excludeFilters:Boolean", "kind" : "val"}, {"label" : "classicSparkSessionF", "tail" : "(): SparkSession", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSessionF", "link" : "com\/sparkutils\/testing\/TestUtils.html#classicSparkSessionF:org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "loggingLevel", "tail" : "(): String", "member" : "com.sparkutils.testing.ClassicUtils.loggingLevel", "link" : "com\/sparkutils\/testing\/TestUtils.html#loggingLevel:String", "kind" : "def"}, {"label" : "lambdaSubQueryMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.lambdaSubQueryMode", "link" : "com\/sparkutils\/testing\/TestUtils.html#lambdaSubQueryMode:String", "kind" : "val"}, {"label" : "classicHostMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.classicHostMode", "link" : "com\/sparkutils\/testing\/TestUtils.html#classicHostMode:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/TestUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/TestUtils.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/TestUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/TestUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/TestUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/TestUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/TestUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/TestUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/TestUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/TestUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/TestUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/TestUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/TestUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/TestUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/TestUtils.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/TestUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/TestUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/TestUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/TestUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "com.sparkutils.testing.TestUtilsEnvironment", "shortDescription" : "", "object" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html", "members_object" : [{"label" : "debug", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.TestUtilsEnvironment.debug", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#debug(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "setupDefaultsViaCurrentSession", "tail" : "(): Unit", "member" : "com.sparkutils.testing.TestUtilsEnvironment.setupDefaultsViaCurrentSession", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#setupDefaultsViaCurrentSession():Unit", "kind" : "def"}, {"label" : "setupDefaults", "tail" : "(sparkSession: SparkSession): Unit", "member" : "com.sparkutils.testing.TestUtilsEnvironment.setupDefaults", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#setupDefaults(sparkSession:org.apache.spark.sql.SparkSession):Unit", "kind" : "def"}, {"label" : "shouldDebugLog", "tail" : ": Boolean", "member" : "com.sparkutils.testing.TestUtilsEnvironment.shouldDebugLog", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#shouldDebugLog:Boolean", "kind" : "lazy val"}, {"label" : "setShouldDebugLog", "tail" : "(shouldDebugLog: Boolean): Unit", "member" : "com.sparkutils.testing.TestUtilsEnvironment.setShouldDebugLog", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#setShouldDebugLog(shouldDebugLog:Boolean):Unit", "kind" : "def"}, {"label" : "shouldRunClusterTests", "tail" : ": Boolean", "member" : "com.sparkutils.testing.TestUtilsEnvironment.shouldRunClusterTests", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#shouldRunClusterTests:Boolean", "kind" : "lazy val"}, {"label" : "setshouldRunClusterTests", "tail" : "(shouldClose: Boolean): Unit", "member" : "com.sparkutils.testing.TestUtilsEnvironment.setshouldRunClusterTests", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#setshouldRunClusterTests(shouldClose:Boolean):Unit", "kind" : "def"}, {"label" : "onFabricOrSynapse", "tail" : "(sparkSession: SparkSession): Boolean", "member" : "com.sparkutils.testing.TestUtilsEnvironment.onFabricOrSynapse", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#onFabricOrSynapse(sparkSession:org.apache.spark.sql.SparkSession):Boolean", "kind" : "def"}, {"label" : "onDatabricksFS", "tail" : ": Boolean", "member" : "com.sparkutils.testing.TestUtilsEnvironment.onDatabricksFS", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#onDatabricksFS:Boolean", "kind" : "lazy val"}, {"label" : "isLocal", "tail" : "(sparkSession: SparkSession): Boolean", "member" : "com.sparkutils.testing.TestUtilsEnvironment.isLocal", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#isLocal(sparkSession:org.apache.spark.sql.SparkSession):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/TestUtilsEnvironment$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark" : [], "org.apache" : [], "com.sparkutils" : [], "org.apache.spark.sql.catalyst.trees" : [], "org" : []};