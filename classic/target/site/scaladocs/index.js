Index.PACKAGES = {"org.apache.spark.sql.catalyst" : [], "org.apache.spark.sql" : [], "com" : [], "com.sparkutils.testing" : [{"name" : "com.sparkutils.testing.AnalysisException", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.testing.AnalysisException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "com.sparkutils.testing.AnalysisException.message", "link" : "com\/sparkutils\/testing\/AnalysisException.html#message:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/sparkutils\/testing\/AnalysisException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/sparkutils\/testing\/AnalysisException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/testing\/AnalysisException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/sparkutils\/testing\/AnalysisException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/sparkutils\/testing\/AnalysisException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/AnalysisException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/AnalysisException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/AnalysisException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/AnalysisException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/AnalysisException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/AnalysisException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/AnalysisException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/AnalysisException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/AnalysisException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/AnalysisException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/AnalysisException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/AnalysisException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/AnalysisException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/AnalysisException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/AnalysisException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/AnalysisException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/testing\/AnalysisException.html", "kind" : "case class"}, {"name" : "com.sparkutils.testing.ClassicSparkTestUtils", "shortDescription" : "", "object" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html", "members_object" : [{"label" : "testStaticConfigKey", "tail" : "(k: String): Unit", "member" : "com.sparkutils.testing.ClassicSparkTestUtils.testStaticConfigKey", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#testStaticConfigKey(k:String):Unit", "kind" : "def"}, {"label" : "resolveBuiltinOrTempFunction", "tail" : "(sparkSession: SparkSession)(name: String, exps: Seq[Expression]): Option[Expression]", "member" : "com.sparkutils.testing.ClassicSparkTestUtils.resolveBuiltinOrTempFunction", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#resolveBuiltinOrTempFunction(sparkSession:org.apache.spark.sql.SparkSession)(name:String,exps:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicSparkTestUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.testing.ClassicTestUtils", "object" : "com\/sparkutils\/testing\/ClassicTestUtils$.html", "members_object" : [{"label" : "getPushDowns", "tail" : "(sparkPlan: SparkPlan): Seq[Filter]", "member" : "com.sparkutils.testing.ClassicTestUtils.getPushDowns", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#getPushDowns(sparkPlan:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "getPushDowns", "tail" : "(dataset: Dataset[T]): Seq[Filter]", "member" : "com.sparkutils.testing.ClassicTestUtils.getPushDowns", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#getPushDowns[T](dataset:org.apache.spark.sql.Dataset[T]):Seq[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "getCorrectPlan", "tail" : "(sparkPlan: SparkPlan): SparkPlan", "member" : "com.sparkutils.testing.ClassicTestUtils.getCorrectPlan", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#getCorrectPlan(sparkPlan:org.apache.spark.sql.execution.SparkPlan):org.apache.spark.sql.execution.SparkPlan", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicTestUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/sparkutils\/testing\/ClassicTestUtils.html", "kind" : "trait", "members_trait" : [{"label" : "onlyWithExtension", "tail" : "(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.ClassicTestUtils.onlyWithExtension", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#onlyWithExtension(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "testPlan", "tail" : "(logicalPlanRule: Rule[LogicalPlan], secondRunWithoutPlan: Boolean, disable: (Int) => Boolean)(thunk: => Unit): Unit", "member" : "com.sparkutils.testing.ClassicTestUtils.testPlan", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#testPlan(logicalPlanRule:org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan],secondRunWithoutPlan:Boolean,disable:Int=>Boolean)(thunk:=>Unit):Unit", "kind" : "def"}, {"label" : "inConnect", "tail" : ": AtomicBoolean", "member" : "com.sparkutils.testing.ClassicTestUtils.inConnect", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#inConnect:java.util.concurrent.atomic.AtomicBoolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sparkVersionNumericMajor", "tail" : ": Int", "member" : "com.sparkutils.testing.ClassicTestUtils.sparkVersionNumericMajor", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#sparkVersionNumericMajor:Int", "kind" : "abstract val"}, {"label" : "sparkSession", "tail" : "(): SparkSession", "member" : "com.sparkutils.testing.ClassicTestUtils.sparkSession", "link" : "com\/sparkutils\/testing\/ClassicTestUtils.html#sparkSession:org.apache.spark.sql.SparkSession", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "com.sparkutils.testing.ClassicUtils", "trait" : "com\/sparkutils\/testing\/ClassicUtils.html", "kind" : "trait", "members_trait" : [{"label" : "withSQLConf", "tail" : "(pairs: (String, String)*)(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.withSQLConf", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#withSQLConf[T](pairs:(String,String)*)(f:=>T):T", "kind" : "def"}, {"label" : "evalCodeGensNoResolve", "tail" : "(f: => T): (T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGensNoResolve", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#evalCodeGensNoResolve[T](f:=>T):(T,T)", "kind" : "def"}, {"label" : "evalCodeGens", "tail" : "(f: => T): (T, T, T, T)", "member" : "com.sparkutils.testing.ClassicUtils.evalCodeGens", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#evalCodeGens[T](f:=>T):(T,T,T,T)", "kind" : "def"}, {"label" : "doWithResolve", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.doWithResolve", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#doWithResolve[T](f:=>T):T", "kind" : "def"}, {"label" : "doResolve", "tail" : ": ThreadLocal[Boolean]", "member" : "com.sparkutils.testing.ClassicUtils.doResolve", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#doResolve:ThreadLocal[Boolean]", "kind" : "val"}, {"label" : "inCodegen", "tail" : "(): Boolean", "member" : "com.sparkutils.testing.ClassicUtils.inCodegen", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#inCodegen:Boolean", "kind" : "def"}, {"label" : "forceInterpreted", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceInterpreted", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#forceInterpreted[T](f:=>T):T", "kind" : "def"}, {"label" : "forceCodeGen", "tail" : "(f: => T): T", "member" : "com.sparkutils.testing.ClassicUtils.forceCodeGen", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#forceCodeGen[T](f:=>T):T", "kind" : "def"}, {"label" : "excludeFilters", "tail" : ": Boolean", "member" : "com.sparkutils.testing.ClassicUtils.excludeFilters", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#excludeFilters:Boolean", "kind" : "val"}, {"label" : "sparkClassicConfig", "tail" : "(): Map[String, String]", "member" : "com.sparkutils.testing.ClassicUtils.sparkClassicConfig", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#sparkClassicConfig():Map[String,String]", "kind" : "def"}, {"label" : "classicSparkSession", "tail" : "(): Option[SparkSession]", "member" : "com.sparkutils.testing.ClassicUtils.classicSparkSession", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#classicSparkSession:Option[org.apache.spark.sql.SparkSession]", "kind" : "def"}, {"label" : "loggingLevel", "tail" : "(): String", "member" : "com.sparkutils.testing.ClassicUtils.loggingLevel", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#loggingLevel:String", "kind" : "def"}, {"label" : "lambdaSubQueryMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.lambdaSubQueryMode", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#lambdaSubQueryMode:String", "kind" : "val"}, {"label" : "classicHostMode", "tail" : ": String", "member" : "com.sparkutils.testing.ClassicUtils.classicHostMode", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#classicHostMode:String", "kind" : "val"}, {"label" : "disableClassicTesting", "tail" : ": Boolean", "member" : "com.sparkutils.testing.ClassicUtils.disableClassicTesting", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#disableClassicTesting:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/ClassicUtils.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/ClassicUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Functionality that only applies to Spark Classic"}, {"name" : "com.sparkutils.testing.SparkClassicConfig", "trait" : "com\/sparkutils\/testing\/SparkClassicConfig.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sparkClassicConfig", "tail" : "(): Map[String, String]", "member" : "com.sparkutils.testing.SparkClassicConfig.sparkClassicConfig", "link" : "com\/sparkutils\/testing\/SparkClassicConfig.html#sparkClassicConfig():Map[String,String]", "kind" : "abstract def"}], "shortDescription" : ""}], "org.apache.spark" : [], "org.apache" : [], "com.sparkutils" : [], "org.apache.spark.sql.catalyst.trees" : [], "org" : []};